{"/setup/exception":{"title":"exce","data":{}},"/":{"title":"Dayjs Business Time Advanced","data":{"":"What's new? In the latest update, I've added some features and made a few changes to the business process. This is the latest development of dayjs-business-time version 1.0.4 | npm : dayjs-business-timeA Day.js plugin that allows you to work with Business Time. | npm : dayjs\nBusiness Days\nBusiness Hours\nBusiness Minutes\nCustomize business days and hours\nCustomize Holidays to prevent them to be counted as Business Days\nCustomize Exceptions for more complex working days and hours.","table-of-contents#Table of Contents":"Setup\nSetting Business Times\nGetting Business Times\nSetting Holidays\nGetting Holidays\nSetting Exceptions\nGetting Exceptions\nChecking\nCheck if a date is a Holiday\nCheck if a date is a Business Day\nCheck if a Time is Business Time\nNext and Last\nGet Next Business Day\nGet Last Business Day\nGet Next Business Time\nGet Last Business Time\nAdding Business Time\nAdd Business Time\nAdd Business Days\nAdd Business Hours\nAdd Business Minutes\nSubtracting Business Time\nSubtract Business Time\nSubtract Business Days\nSubtract Business Hours\nSubtract Business Minutes\nDiff\nBusiness Time Diff\nBusiness Days Diff\nBusiness Hours Diff\nBusiness Minutes Diff"}},"/setup/holiday":{"title":"hol","data":{}},"/setup/business-time":{"title":"Business Time","data":{"setting-business-times#Setting Business Times":"dayjs = instanceof Dayjs\n/**\r\n * @param 1 business template. type : BusinessHoursMap \r\n * @param 2 type (add|replace) default 'replace'. type : string\r\n * add : will change working days as specified\r\n * replace : will replace all working days as specified (if the day does not exist it will be set as 'null')\r\n*/\r\nconst param1 : BusinesHoursMap = {\r\n    sunday?:[{start : \"HH:mm:ss\", end: \"HH:mm:ss\"}] | null,\r\n    ...\r\n};\r\nconst param2 : string = 'replace';\r\n\r\n// Set Business Times in dayjs\r\ndayjs.setBusinessTime(param1, param2);\r\nSee more...","default-working-hours#Default Working Hours":"","monday-friday-9am---5pm#Monday-Friday 9am - 5pm":"By default, Business Times are Monday-Friday, 9am - 5pm, but you can setup as many Business Segments you want in a day.\r\n(Jika tidak mengatur jam kerja, maka secara default akan menggunakan jam kerja senin-jumat 09:00-17:00)\n// Create your Business Week definition\r\nconst businessTimes: BusinessHoursMap = {\r\n    monday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    tuesday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    wednesday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    thursday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    friday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    saturday: null,\r\n    sunday: null,\r\n}\r\n\r\n// Set Business Times in dayjs\r\ndayjs.setBusinessTime(businessTimes);","always-open#Always Open":"There is no closing time during the week.\r\n(24 jam sehari selama seminggu, tidak ada hari libur kecuali exceptions atau holidays sudah diatur)\n// Create your Business Week definition\r\nconst businessTimes: BusinessHoursMap = {\r\n    monday: [{ start: '00:00:00', end: '24:00:00' }],\r\n    tuesday: [{ start: '00:00:00', end: '24:00:00' }],\r\n    wednesday: [{ start: '00:00:00', end: '24:00:00' }],\r\n    thursday: [{ start: '00:00:00', end: '24:00:00' }],\r\n    friday: [{ start: '00:00:00', end: '24:00:00' }],\r\n    saturday: [{ start: '00:00:00', end: '24:00:00' }],\r\n    sunday: [{ start: '00:00:00', end: '24:00:00' }],\r\n}\r\n\r\n// Set Business Times in dayjs\r\ndayjs.setBusinessTime(businessTimes);","always-close#Always Close":"only applies when 'exception' has been set.\r\n(berlaku ketika exceptions sudah diatur)\n// Set Business Times in dayjs\r\ndayjs.setBusinessTime({});\r\n\r\n/**\r\n * @Result :\r\n{\r\n    monday: null,\r\n    tuesday: null,\r\n    wednesday: null,\r\n    thursday: null,\r\n    friday: null,\r\n    saturday: null,\r\n    sunday: null,\r\n}\r\n\r\n*/","customized-working-hours#Customized Working Hours":"","weekend-template#Weekend template":"only specified working hours.\r\n(cuma kerja dihari sabtu dan minggu jam 08:00-18:00)\n// Create your Business Week definition\r\nconst businessTimes: BusinessHoursMap = {\r\n  sunday: [{ start: '08:00:00', end: '12:00:00' }, { start: '14:00:00', end: '18:00:00' }],\r\n  saturday: [{ start: '08:00:00', end: '13:00:00' }, { start: '12:00:00', end: '18:00:00' }, { start: '20:00:00', end: '24:00:00' }], // merge overlap\r\n}\r\n\r\ndayjs.setBusinessTime(businessTimes);\r\n\r\n/**\r\n * @Result :\r\n {\r\n    monday: null,\r\n    tuesday: null,\r\n    wednesday: null,\r\n    thursday: null,\r\n    friday: null,\r\n    saturday: [{ start: '08:00:00', end: '12:00:00'}, { start: '14:00:00', end: '18:00:00'}],\r\n    sunday: [{ start: '08:00:00', end: '18:00:00' }, { start: '20:00:00', end: '24:00:00'}],\r\n }\r\n */","type--add#type : add":"// default working hours\r\nconst businessTimes: BusinessHoursMap = {\r\n    monday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    tuesday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    wednesday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    thursday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    friday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    saturday: null,\r\n    sunday: null,\r\n}\r\n\r\n// set default working hour\r\ndayjs.setBusinessTime(businessTimes);\r\n\r\n// type add \r\nconst newTemplate: BusinessHoursMap = {\r\n  sunday: [{ start: '08:00:00', end: '18:00:00' }],\r\n  saturday: [{ start: '08:00:00', end: '18:00:00' }],\r\n}\r\n\r\n// set to working hour\r\ndayjs.setBusinessTime(newTemplate, 'add');\r\n\r\n/**\r\n * @Result\r\n {\r\n    monday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    tuesday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    wednesday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    thursday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    friday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    sunday: [{ start: '08:00:00', end: '18:00:00' }],\r\n    saturday: [{ start: '08:00:00', end: '18:00:00' }],\r\n}\r\n */","type--replace#type : replace":"// default working hours\r\nconst businessTimes: BusinessHoursMap = {\r\n    monday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    tuesday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    wednesday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    thursday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    friday: [{ start: '09:00:00', end: '17:00:00' }],\r\n    saturday: null,\r\n    sunday: null,\r\n}\r\n\r\n// set default working hour\r\ndayjs.setBusinessTime(businessTimes);\r\n\r\n// type replace \r\nconst newTemplate: BusinessHoursMap = {\r\n  sunday: [{ start: '08:00:00', end: '18:00:00' }],\r\n  saturday: [{ start: '08:00:00', end: '18:00:00' }],\r\n}\r\n\r\n// set to working hour\r\ndayjs.setBusinessTime(newTemplate, 'replace');\r\n\r\n/**\r\n * @Result\r\n {\r\n    monday: null,\r\n    tuesday: null,\r\n    wednesday: null,\r\n    thursday: null,\r\n    friday: null,\r\n    sunday: [{ start: '08:00:00', end: '18:00:00' }],\r\n    saturday: [{ start: '08:00:00', end: '18:00:00' }],\r\n}\r\n */"}},"/setup/instalation":{"title":"Instalation","data":{"instalation#Instalation":"npm i dayjs-business-time-advanced\npnpm add dayjs-business-time-advanced\nyarn add dayjs-business-time-advanced\nbun add dayjs-business-time-advanced","usage#Usage":"","commonjs#CommonJS":"// First of all, include dayjs\r\nconst dayjs = require('dayjs');\r\n\r\n// Then, include dayjs-business-time-advanced\r\nconst dayjsBusinessTime = require('dayjs-business-time-advanced');\r\n\r\n// Attach dayjs plugin\r\ndayjs.extend(dayjsBusinessTime);\r\n\r\n// Now you have all Business Time methods in dayjs","es6-modules--typescript#ES6 Modules / typescript":"// First of all, include dayjs\r\nimport dayjs from 'dayjs';\r\n\r\n// Then, include dayjs-business-time-advanced\r\nimport dayjsBusinessTime from 'dayjs-business-time-advanced';\r\n\r\n// Attach dayjs plugin\r\ndayjs.extend(dayjsBusinessTime);\r\n\r\n// Now you have all Business Time methods in dayjs"}}}